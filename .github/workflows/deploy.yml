name: Full deploy (infra -> backend -> frontend)

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_DIR: terraform/infra
  SERVICES_DIR: terraform/services
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend

jobs:
  deploy-all:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'terraform/services/**/backend/**'
            frontend:
              - 'frontend/**'
              - 'terraform/services/**/frontend/**'
            infra:
              - 'terraform/infra/**'
              - 'terraform/modules/**'

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud project & region
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT }}
          gcloud config set run/region ${{ secrets.GCP_REGION }}
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      # ---------------------------
      # 1) Infra: init/plan/apply
      # ---------------------------
      - name: Terraform init (infra)
        if: steps.changes.outputs.infra == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd $TF_DIR
          terraform init -input=false

      - name: Terraform plan (infra)
        if: steps.changes.outputs.infra == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd $TF_DIR
          terraform plan -out=tfplan -input=false || true
          terraform show -json tfplan > tfplan.json || true
          terraform output -json > tf-outputs.json || true
        continue-on-error: true

      - name: Terraform apply (infra)
        if: steps.changes.outputs.infra == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd $TF_DIR
          terraform apply -auto-approve
          echo "DATABASE_IP=$(terraform output -raw database_private_ip)" >> $GITHUB_ENV
          echo "VPC_CONNECTOR_ID=$(terraform output -raw vpc_connector_id)" >> $GITHUB_ENV

      - name: Parse TF outputs into env
        run: |
          BACKEND_REPO=$(jq -r '.backend_repo.value // empty' tf-outputs.json)
          FRONTEND_REPO=$(jq -r '.frontend_repo.value // empty' tf-outputs.json)
          echo "BACKEND_REPO=${BACKEND_REPO}" >> $GITHUB_ENV
          echo "FRONTEND_REPO=${FRONTEND_REPO}" >> $GITHUB_ENV

      # ---------------------------
      # 2) Build Docker images
      # ---------------------------

      - name: Build & push backend image
        if: steps.changes.outputs.backend == 'true' || steps.changes.outputs.infra == 'true' || github.event_name == 'workflow_dispatch'
        env:
          REGION: ${{ secrets.GCP_REGION }}
          PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT}/${BACKEND_REPO}/store-backend:${GITHUB_SHA::8}"
          docker build --build-arg DB_SERVER_IP=${{ env.DATABASE_IP }} -t "$IMAGE" ./backend
          docker push "$IMAGE"
          echo "BACKEND_IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build & push frontend image
        if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' || steps.changes.outputs.infra == 'true' || github.event_name == 'workflow_dispatch'
        env:
          REGION: ${{ secrets.GCP_REGION }}
          PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT}/${FRONTEND_REPO}/store-frontend:${GITHUB_SHA::8}"
          docker build --build-arg BACKEND_API_URL=${{ env.BACKEND_URL }} -t "$IMAGE" ./frontend
          docker push "$IMAGE"
          echo "FRONTEND_IMAGE=$IMAGE" >> $GITHUB_ENV    

      # ---------------------------
      # 3) Deploy services via Terraform
      # ---------------------------
      - name: Terraform deploy services
        if: steps.changes.outputs.backend == 'true' || steps.changes.outputs.frontend == 'true' || steps.changes.outputs.infra == 'true' || github.event_name == 'workflow_dispatch'
        env:
          DATABASE_IP: ${{ env.DATABASE_IP }}
          VPC_CONNECTOR_ID: ${{ env.VPC_CONNECTOR_ID }}
          BACKEND_IMAGE: ${{ env.BACKEND_IMAGE }}
          FRONTEND_IMAGE: ${{ env.FRONTEND_IMAGE }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          cd $SERVICES_DIR
          terraform init -input=false
          terraform apply -auto-approve \
            -var="db_private_ip=$DATABASE_IP" \
            -var="vpc_connector_id=$VPC_CONNECTOR_ID" \
            -var="backend_image=$BACKEND_IMAGE" \
            -var="frontend_image=$FRONTEND_IMAGE" \
            -var="project=$GCP_PROJECT" \
            -var="region=$GCP_REGION"

      # ---------------------------
      # 4) Final output
      # ---------------------------
      - name: Final output
        run: |
          echo "=== Deployment summary ==="
          echo "Backend image: $BACKEND_IMAGE"
          echo "Frontend image: $FRONTEND_IMAGE"
          echo "Database IP: $DATABASE_IP"
          echo "VPC Connector ID: $VPC_CONNECTOR_ID"
